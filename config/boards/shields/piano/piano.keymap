// vim: ft=dts ts=4 sts=4 sw=4 et
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

&mt {
    tapping-term-ms = <180>;
    quick-tap-ms = <150>;
    require-prior-idle-ms = <100>;
    flavor = "tap-preferred";
};

&sl {
    release-after-ms = <500>;
};

#define PLCH 0

#define ALC  0
#define ALR  1
#define NUM  2
#define SYM1 3
#define SYM2 4
#define SYS  5
#define FN   6
#define BT   7
#define MHID 8
#define WHID 9
#define SHC  10
#define LCK  11

#include "mouse.dtsi"
#include "dances.dtsi"

#define COMBO_2KEYS 40
#define COMBO_3KEYS (COMBO_2KEYS * 3 / 2)

/ {
    combos {
        compatible = "zmk,combos";

        combo_esc {
            timeout-ms = <COMBO_2KEYS>;
            key-positions = <0 1>;
            bindings = <&kp ESC>;
            layers = <ALC ALR NUM>;
        };

        combo_tab {
            timeout-ms = <COMBO_2KEYS>;
            key-positions = <1 2>;
            bindings = <&kp TAB>;
            layers = <ALC ALR NUM>;
        };

        combo_del {
            timeout-ms = <COMBO_2KEYS>;
            key-positions = <3 4>;
            bindings = <&kp DEL>;
            layers = <ALC ALR NUM>;
        };

        combo_bspc {
            timeout-ms = <COMBO_2KEYS>;
            key-positions = <4 5>;
            bindings = <&kp BSPC>;
            layers = <ALC ALR NUM>;
        };

        combo_bt {
            timeout-ms = <COMBO_3KEYS>;
            key-positions = <10 11 12>;
            bindings = <&to BT>;
            layers = <SYS>;
        };

        combo_mhid {
            timeout-ms = <COMBO_3KEYS>;
            key-positions = <3 4 5>;
            bindings = <&to MHID>;
            layers = <ALC>;
        };

        combo_vix {
            timeout-ms = <COMBO_2KEYS>;
            key-positions = <0 1>;
            bindings = <&vix>;
            layers = <SHC>;
        };

        combo_lock {
            timeout-ms = <COMBO_3KEYS>;
            key-positions = <3 4 5>;
            bindings = <&tog LCK>;
            layers = <SYS LCK>;
        };
    };

    macros {
        rarrow: right_arrow {
            compatible = "zmk,behavior-macro";
            label = "RIGHT_ARROW";
            #binding-cells = <0>;
            bindings = <&macro_tap &kp MINUS &kp GT>;
        };

        git: git_sequence {
            compatible = "zmk,behavior-macro";
            label = "GIT_SEQUENCE";
            #binding-cells = <0>;
            bindings = <&macro_tap &kp G &kp I &kp T>;
        };

        zig: zig_sequence {
            compatible = "zmk,behavior-macro";
            label = "ZIG_SEQUENCE";
            #binding-cells = <0>;
            bindings = <&macro_tap &kp Z &kp I &kp G>;
        };

        viw: vi_write {
            compatible = "zmk,behavior-macro";
            label = "VI_WRITE";
            #binding-cells = <0>;
            bindings = <&macro_tap &kp ESC &kp COLON &kp W &kp RET>;
        };

        viq: vi_quit {
            compatible = "zmk,behavior-macro";
            label = "VI_QUIT";
            #binding-cells = <0>;
            bindings = <&macro_tap &kp ESC &kp COLON &kp Q &kp RET>;
        };

        vix: vi_save_exit {
            compatible = "zmk,behavior-macro";
            label = "VI_SAVE_EXIT";
            #binding-cells = <0>;
            bindings = <&macro_tap &kp ESC &kp COLON &kp X &kp RET>;
        };

        rcw: realeasable_caps_word {
            compatible = "zmk,behavior-macro";
            label = "RELEASEABLE_CAPS_WORD";
            #binding-cells = <0>;
            bindings = <&macro_tap &kp F17 &caps_word>;
        };
    };

    behaviors {
        mk: momentary_keypress {
            compatible = "zmk,behavior-hold-tap";
            label = "MOMENTARY_KEYPRESS";
            #binding-cells = <2>;
            tapping-term-ms = <180>;
            quick-tap-ms = <150>;
            require-prior-idle-ms = <100>;
            flavor = "tap-preferred";
            bindings = <&mo>, <&kp>;
        };

        mr: momentary_keyrepeat {
            compatible = "zmk,behavior-hold-tap";
            label = "MOMENTARY_KEYREPEAT";
            #binding-cells = <2>;
            tapping-term-ms = <180>;
            quick-tap-ms = <150>;
            require-prior-idle-ms = <100>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&key_repeat>;
        };

        ms: momentary_stickylayer {
            compatible = "zmk,behavior-hold-tap";
            label = "MOMENTARY_STICKYLAYER";
            #binding-cells = <2>;
            tapping-term-ms = <250>;
            flavor = "tap-preferred";
            bindings = <&mo>, <&sl>;
        };

        sm: slow_modtap {
            compatible = "zmk,behavior-hold-tap";
            label = "SLOW_MODTAP";
            #binding-cells = <2>;
            tapping-term-ms = <250>;
            quick-tap-ms = <250>;
            require-prior-idle-ms = <200>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        alpha_common {
        bindings = <
                &mr LCTRL PLCH  &mt LALT  P     &mt LCMD  I     &mt RCMD  D     &mt RALT  C     &mt RCTRL R
&mk FN    A     &mk SYM1  O     &mk SYM2  E     &mk SYS   U     &mk SYS   H     &mk SYM2  T     &mk SYM1  N     &mk SHC   S
                                &sm LSHFT SPACE &kp COMMA       &ms NUM   NUM   &ms ALR ALR
        >;
        };

        alpha_rare {
        bindings = <
                &key_repeat     &kp Y           &kp F           &kp G           &kp L           &kp V
&kp Q           &kp X           &kp J           &kp K           &kp B           &kp M           &kp W           &kp RET
                                &trans          &kp Z           &rcw            &kp CAPS
        >;
        };

        numbers {
        bindings = <
                &kp N1          &kp N2          &kp N3          &kp N4          &kp N5          &kp N6
&kp PLUS        &kp MINUS       &kp STAR        &kp FSLH        &kp N7          &kp N8          &kp N9          &kp N0
                                &trans          &kp DOT         &kp EQUAL       &kp BSLH
        >;
        };

        symbols_1 {
        bindings = <
                &kp LBKT        &kp LBRC        &kp LPAR        &kp RPAR        &kp RBRC        &kp RBKT
&kp CARET       &kp AT          &kp HASH        &kp DLLR        &kp COLON       &kp SEMI        &kp SQT         &kp DQT
                                &kp LSHFT       &none           &none           &kp SPACE
        >;
        };

        symbols_2 {
        bindings = <
                &kp AMPS        &kp PIPE        &kp EXCL        &kp QMARK       &kp PRCNT       &kp EQUAL
&none           &kp BSLH        &kp GRAVE       &kp TILDE       &kp LT          &kp GT          &rarrow         &none
                                &kp LSHFT       &none           &none           &kp SPACE
        >;
        };

        system {
        bindings = <
                &kp INS         &kp PG_UP       &kp DEL         &kp HOME        &kp UP          &kp END
&kp K_APP       &kp PSCRN       &kp PG_DN       &kp SLCK        &kp LEFT        &kp DOWN        &kp RIGHT       &kp PAUSE_BREAK
                                &kp LSHFT       &none           &none           &none
        >;
        };

        function_keys {
        bindings = <
                &kp F1          &kp F2          &kp F3          &kp F4          &kp F5          &kp F6
&none           &none           &none           &none           &kp F7          &kp F8          &kp F9          &kp F10
                                &kp F11         &none           &kp F17         &kp F12
        >;
        };

        bluetooth {
        bindings = <
                &bt BT_SEL 0    &bt BT_SEL 1    &bt BT_SEL 2    &bt BT_PRV      &bt BT_NXT      &bt BT_CLR
&none           &bt BT_SEL 3    &bt BT_SEL 4    &sys_reset      &sys_reset      &none           &none           &kp LCMD
                                &none           &to ALC         &to ALC         &none
        >;
        };

        mouse_keys {
        bindings = <
                &kp LCTRL       &mmv MOUSE_U    &none           &mkp MB1        &mkp MB2        &mkp MB3
&none           &mmv MOUSE_L    &mmv MOUSE_D    &mmv MOUSE_R    &mkp MB4        &mkp MB5        &mkp MB6        &mkp MB7
                                &mo WHID        &to ALC         &to ALC         &mo WHID
        >;
        };

        wheel_keys {
        bindings = <
                &none           &mwh SCROLL_U   &none           &none           &none           &none
&none           &mwh SCROLL_L   &mwh SCROLL_D   &mwh SCROLL_R   &none           &none           &none           &none
                                &none           &none           &none           &none
        >;
        };

        shortcuts {
        bindings = <
                &viq            &viw            &none           &git            &zig            &none
&none           &none           &none           &none           &none           &none           &none           &none
                                &none           &none           &none           &none
        >;
        };

        lock {
        bindings = <
                &none           &none           &none           &none           &none           &none
&none           &none           &none           &none           &none           &none           &none           &none
                                &none           &none           &none           &none
        >;
        };
    };
};
